--
-- TABLE TYPEPROF
--  
 CREATE TABLE "TYPEPROF" 
   (	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"VAL" VARCHAR2(100 BYTE), 
	"DESCE" VARCHAR2(100 BYTE), 
	 CONSTRAINT "PK_TYPEPROF" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON TABLE "TYPEPROF"  IS 'Fonctionnaire, Entrepreneur, Fonctionnaire international, Haut fonctionnaire, Autres';

   CREATE SEQUENCE  "SEQ_TYPEPROF"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
   
   create or replace 
FUNCTION getSeqTypeProf RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_TYPEPROF.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE PAYS
--

 CREATE TABLE "PAYS" 
   (	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"VAL" VARCHAR2(100 BYTE), 
	"DESCE" VARCHAR2(100 BYTE), 
	 CONSTRAINT "PK_PAYS" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON TABLE "PAYS"  IS 'ex val:France , ex desce:Francais';
   
      CREATE SEQUENCE  "SEQ_PAYS"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
	  
create or replace 
FUNCTION getSeqPays RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_PAYS.nextval INTO retour FROM dual;
return retour;
END; 
   
--
-- TABLE SEXE
--

  CREATE TABLE "SEXE" 
   (	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"VAL" VARCHAR2(50 BYTE), 
	"DESCE" VARCHAR2(50 BYTE), 
	 CONSTRAINT "PK_SEXE" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON TABLE "SEXE"  IS 'masculin,feminin';
   
   CREATE SEQUENCE "SEQ_SEXE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
   
   create or replace 
FUNCTION getSeqSexe RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_SEXE.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE ETUDIANT
--

CREATE TABLE "ETUDIANT" 
(	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
"NOM" VARCHAR2(100 BYTE), 
"PRENOM" VARCHAR2(50 BYTE), 
"DATENAISSANCE" DATE, 
"PERE" VARCHAR2(100 BYTE), 
"PROFFPERE" VARCHAR2(50 BYTE), 
"MERE" VARCHAR2(100 BYTE), 
"PROFMERE" VARCHAR2(50 BYTE), 
"ADRESSE" VARCHAR2(100 BYTE), 
"CONTACT" VARCHAR2(100 BYTE), 
"MAIL" VARCHAR2(100 BYTE), 
"CHEMIN" VARCHAR2(100 BYTE), 
"SEXE" VARCHAR2(50 BYTE), 
"ENTITE" VARCHAR2(50 BYTE), 
"NIVEAU" NUMBER, 
"PAYS" VARCHAR2(50 BYTE), 
 CONSTRAINT "PK_ETUDIANT" PRIMARY KEY ("ID")
USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
TABLESPACE "USERS"  ENABLE, 
 CONSTRAINT "FK_ETUDIANT_ETUDIANTT_TYPEPROF" FOREIGN KEY ("PROFFPERE")
  REFERENCES "TYPEPROF" ("ID") ENABLE, 
 CONSTRAINT "FK_ETUDIANT_ETUDIANTY_TYPEPROF" FOREIGN KEY ("PROFMERE")
  REFERENCES "TYPEPROF" ("ID") ENABLE, 
 CONSTRAINT "FK_ETUDIANT_REFERENCE_ENTITE" FOREIGN KEY ("ENTITE")
  REFERENCES "ENTITE" ("ID") ENABLE, 
 CONSTRAINT "FK_ETUDIANT_REFERENCE_PAYS" FOREIGN KEY ("PAYS")
  REFERENCES "PAYS" ("ID") ENABLE, 
 CONSTRAINT "FK_ETUDIANT_REFERENCE_SEXE" FOREIGN KEY ("SEXE")
  REFERENCES "SEXE" ("ID") ENABLE
) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
TABLESPACE "USERS" ;

   CREATE SEQUENCE "SEQ_ETUDIANT"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 868 NOCACHE  NOORDER  NOCYCLE ;

create or replace 
FUNCTION getSeqEtudiant RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_ETUDIANT.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE ENTREEUNIV
--

CREATE TABLE "ENTREEUNIV" 
(	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
"PROMOTION" VARCHAR2(50 BYTE), 
"ETUDIANT" VARCHAR2(50 BYTE), 
"DATY" DATE, 
"NUMERO" NUMBER DEFAULT 1, 
 CONSTRAINT "PK_ENTREEUNIV" PRIMARY KEY ("ID")
USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
TABLESPACE "USERS"  ENABLE, 
 CONSTRAINT "FK_ENTREEUN_REFERENCE_ETUDIANT" FOREIGN KEY ("ETUDIANT")
  REFERENCES "ETUDIANT" ("ID") ENABLE
) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
TABLESPACE "USERS" ;

   CREATE SEQUENCE  "SEQ_ENTREEUNIV"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 852 NOCACHE  NOORDER  NOCYCLE ;
   
   create or replace 
FUNCTION getSeqEntreeUniv RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_ENTREEUNIV.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE PROMOTION
--
  CREATE TABLE "PROMOTION" 
   (	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"NOM" VARCHAR2(100 BYTE), 
	"DATEENTREE" DATE, 
	"REMARQUE" VARCHAR2(50 BYTE), 
	 CONSTRAINT "PROMOTION_PK" PRIMARY KEY ("ID")

   )  ;
   
 CREATE SEQUENCE "SEQ_PROMOTION"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE ;
 
 create or replace 
FUNCTION getSeqPromotion RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_PROMOTION.nextval INTO retour FROM dual;
return retour;
END; 

--
-- VUE ETUDIANTPROMO
--
  
CREATE OR REPLACE FORCE VIEW "ETUDIANTPROMO" AS 
  select e.id,e.nom,e.prenom,e.DATENAISSANCE,e.chemin,e.pere,
e.PROFFPERE,e.mere,e.PROFMERE,e.adresse,
e.contact,e.mail,e.sexe,e.entite,
e.niveau,e.pays, eu.PROMOTION, eu.DATY, eu.numero from etudiant e, entreeuniv eu
where e.ID=eu.ETUDIANT(+) ;

--
-- VUE ETUDIANTLIB
-- 

  CREATE OR REPLACE FORCE VIEW "ETUDIANTLIB" ("ID", "NOM", "PRENOM", "DATENAISSANCE", "CHEMIN", "PERE", "PROFFPERE", "MERE", "PROFMERE", "ADRESSE", "CONTACT", "MAIL", "SEXE", "ENTITE", "NIVEAU", "PAYS", "PROMOTION", "DATY", "NUMERO") AS 
  SELECT e.id,e.nom,e.prenom,e.datenaissance,e.chemin,e.pere,tp.val,e.mere,tp2.val,e.adresse,
e.contact,e.mail,s.val,ec.val,
e.niveau,p.val,prom.nom,en.daty,en.numero
FROM etudiant e,typeprof tp,beneficiaire ec,pays p,typeprof tp2,sexe s, entreeuniv en,promotion prom
WHERE e.proffpere=tp.id and e.profmere=tp2.id and e.entite=ec.id and e.pays=p.id and e.sexe=s.id
and en.promotion=prom.id and e.id=en.etudiant ;


--
-- MODIFIER COLONNE TABLE ETUDIANT
--
ALTER TABLE etudiant
DROP CONSTRAINT FK_ETUDIANT_REFERENCE_ENTITE;
ALTER TABLE etudiant
ADD CONSTRAINT FK_ETUDIANT_REFERENCE_SOCIETE FOREIGN KEY ("ENTITE")
  REFERENCES "BENEFICIAIRE" ("ID") ENABLE;
  
--
-- TABLE RubriquePrixEntite
--

create table RubriquePrixEntite (
	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE PRIMARY KEY, 
	libelle VARCHAR2(100 BYTE), 
	montant NUMBER(20, 2),
	entite VARCHAR2(50 BYTE)
);

 CREATE SEQUENCE "SEQ_RUBRIQUEPRIXENTITE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE ;
 
 create or replace 
FUNCTION getSeqRubriquePrixEntite RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_RUBRIQUEPRIXENTITE.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE ConfPrixEtudiant
--
create table ConfPrixEtudiant (
	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE PRIMARY KEY,
	daty date,
	etudiant VARCHAR2(50 BYTE), 
	echeance DATE,
	ecolage NUMBER(20, 2),
	food NUMBER(20, 2),
	transport NUMBER(20, 2),
	inscription NUMBER(20,2),
	autres NUMBER(20,2),
	remarques  VARCHAR2(100 BYTE)
);

 CREATE SEQUENCE "SEQ_CONFPRIXETUDIANT"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE ;
 
 create or replace 
FUNCTION getSeqConfPrixEtudiant RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_CONFPRIXETUDIANT.nextval INTO retour FROM dual;
return retour;
END; 

--
-- TABLE ConfPrixEtudiantHisto
--
create table ConfPrixEtudiantHisto (
	"ID" VARCHAR2(50 BYTE) NOT NULL ENABLE PRIMARY KEY,
	daty date,
	etudiant VARCHAR2(50 BYTE), 
	echeance DATE,
	ecolage NUMBER(20, 2),
	food NUMBER(20, 2),
	transport NUMBER(20, 2),
	inscription NUMBER(20,2),
	autres NUMBER(20,2),
	remarques  VARCHAR2(100 BYTE)
);

 CREATE SEQUENCE "SEQ_CONFPRIXETUDIANTHISTO"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE ;
 
 create or replace 
FUNCTION getSeqConfPrixEtudiantHisto RETURN NUMBER IS retour NUMBER;
BEGIN
SELECT SEQ_CONFPRIXETUDIANTHISTO.nextval INTO retour FROM dual;
return retour;
END; 

ALTER TABLE ETUDIANT
MODIFY  etat int; 

  CREATE OR REPLACE FORCE VIEW "FINANCE"."ETUDIANTLIB" ("ID", "NOM", "PRENOM", "DATENAISSANCE", "CHEMIN", "PERE", "PROFFPERE", "MERE", "PROFMERE", "ADRESSE", "CONTACT", "MAIL", "SEXE", "ENTITE", "NIVEAU", "PAYS", "PROMOTION", "DATY", "NUMERO", "ETAT") AS 
  select e.id, e.nom, e.prenom, e.datenaissance, e.chemin, e.pere, tp.val as proffpere, e.mere, tp2.val as profmere, e.adresse,
e.contact, e.mail, s.val as sexe, ec.val as entite, e.niveau, p.val as pays, '' as promotion, '' as daty, '' as numero, e.etat as etat
FROM etudiant e,typeprof tp,beneficiaire ec,pays p,typeprof tp2,sexe s
WHERE e.proffpere=tp.id and e.profmere=tp2.id and e.entite=ec.id and e.pays=p.id and e.sexe=s.id;